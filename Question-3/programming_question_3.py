# -*- coding: utf-8 -*-
"""programming_question_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ah2rRLK7LIAtWPQlEwnkSZCzt-L6mF1v
"""

# Question 3

# **Note**: While entering the input. For example if the resolution of an image is **1600x1000**, then it means the **width** is **1600** and the **height** is **1000**. 
# Similarly in the above program the **rows** would be **1000** and the **columns** would be **1600**


# Write a program that reads “rose.raw” as the input image; change the intensity quantization level; 
# save the new image into a new file in raw format. The original image uses 8 bits per pixel, thus having 256 intensity levels.

# Necessary libraries used for this assignment
import numpy as np
# The only reason that numpy library is used to convert the raw image into array of pixels. 
# Mainly used to store the values in an array.

#-----------------------------------------------------------------------------------------------------------------------


# Function: Resolution
#
#    Description:  This functions takes the input from the user. 
#                  User should enter the number of rows, columns of the old image and the new image.
#
#    Parameter:    None
#
#    Result:       returns the value of the inputted rows and columns of the old and new image.
#   
#    Author:       Tanu Nanda Prabhu

def resolution():

    # Explicitly typed-casted to intergers, because the rows and columns of the images must be an integer (ex: 256x256). 
    ROWS = int(input("Enter the number of rows of the input image: "))
    COLS = int(input("Enter the number of columns of the input image: "))

    return ROWS, COLS

#-----------------------------------------------------------------------------------------------------------------------

# Function: FileName
#
#    Description:  This functions takes the input from the user. 
#                  User should enter the filename along with the path to read and save.
#
#    Parameter:    None
#
#    Result:       returns the name of the file to read and save.
#   
#    Author:       Tanu Nanda Prabhu

def fileName():
 
    filename_to_read = input("Enter the file name to read:  ")
    filename_to_save = input("Enter the file name to save:  ")
    return filename_to_read, filename_to_save

#-----------------------------------------------------------------------------------------------------------------------

# Function: Intensity Level
#
#    Description:  This functions takes the input from the user. 
#                  User should enter the number of intensity levels
#
#    Parameter:    None
#
#    Result:       returns the level of intensity
#   
#    Author:       Tanu Nanda Prabhu

def intensityLevel():
 
    level = int(input("Enter the number of intensity levels: "))

    # 128 - 1 bit to 0
    # 64 - 2 bit to 0
    # 32 - 3 bit to 0
    # 16 - 4 bit to 0
    
    return level

#-----------------------------------------------------------------------------------------------------------------------

# Function: main
#
#    Description:  This is the main function of the program
#                  On executing this function, all the functions declared inside will be called. Just like in C, C++, etc.
#
#    Parameter:    None
#
#    Result:       Calls every function declared inside it.
#   
#    Author:       Tanu Nanda Prabhu

if __name__ == "__main__":

    resolution = resolution()    # Calling the resolution() and storing the result in resolution
    fileName = fileName()        # Calling the fileName() and storing the result in fileName
    level = intensityLevel()     # Calling the intensityLevel() and storing the result in level

#-----------------------------------------------------------------------------------------------------------------------

# Initialising row and column values for the image
ROWS = resolution[0]        
COLS =  resolution[1]       # For example a particular image in this case would contain (256*256) rows and columns meaning 65,536 pixels

#-----------------------------------------------------------------------------------------------------------------------

# Opening the input image file (RAW format)
fin = open(fileName[0])     # The variable fileName contains the inputted file name to read from 
print("----------------------------------------------------")
print(fin)
print("----------------------------------------------------")

#-----------------------------------------------------------------------------------------------------------------------

# Loading the input image
print("... Load input image")
img = np.fromfile(fin, dtype = np.uint8, count = ROWS * COLS)  # This is why numpy is used to store the values in an array format (rows and columns)
print("Dimension of the old image array: ", img.ndim)
print("Size of the old image array: ", img.size)
print("----------------------------------------------------")

#-----------------------------------------------------------------------------------------------------------------------

# Conversion of the input image array into binary array

binArray = np.array([])  # Initializing a new array 'a'
print(binArray.shape)    # The new array has nothing in it

for i in range(len(img)):

# Here each time since we are in loop individual elememts of the input image would be converted to binary, and would be appended to the binArray
    binArray = np.append(binArray, [format(img[i],"08b")])     # This is how we convert an array into binary in python using '08b' (8 bits)

print("The binary converted array is shown below:\n", binArray)

#-----------------------------------------------------------------------------------------------------------------------

# Intensity level quantization

# Here we reduce the intensity of the input image into four divverent levels 128, 64, 32 and 16. 
# This can be done by setting the least significant bits to 0. 
# For example in the case of 128 we need to set the least significant bit to 0.
# Similarly for 64 two least significant bit to 0, 32 and 16 three and four least significant bits to 0 respectively.

for i in range(len(binArray)):


# This step is mandatory because if we need to access individual then ond of the best way in python is to convert it to a list.  
    binArrayList = list(binArray[i])


    # Condition for 8 bits in a pixel
    if len(binArrayList) == 8:

        # If the intensity level entered by the user is 128 then set the lsb to 0
        if level == 128:
            binArrayList[7]='0'  # Because 0-7 = 8 bits and the least bit is the 7th bit.
            binArray[i]=''.join(binArrayList)

        # If the intensity level entered by the user is 64 then set the two lsb to 0
        elif level == 64:
            binArrayList[6] = '0'
            binArrayList[7] = '0'
            binArray[i] = ''.join(binArrayList)

        # If the intensity level entered by the user is 32 then set the three lsb to 0
        elif level == 32:
            binArrayList[5] = '0'
            binArrayList[6] = '0'
            binArrayList[7] = '0'
            binArray[i] = ''.join(binArrayList)

        # If the intensity level entered by the user is 16 then set the four lsb to 0
        elif level == 16:
            binArrayList[4] = '0'
            binArrayList[5] = '0'
            binArrayList[6] = '0'
            binArrayList[7] = '0'
            binArray[i] = ''.join(binArrayList)

    else:
        binArray[i]=binArray[i]

print("The updated binary array after intensity quantization will be: \n", binArray)
print("---------------------------------------------------------------------------")
print("The shape of the updated binary array is: \n", binArray.shape)

#-----------------------------------------------------------------------------------------------------------------------

# Conversion of the intensity quantized binary array to interger array

for i in range(len(binArray)):

    binArray[i] = int("".join(str(x) for x in binArray[i]), 2)   # Conversion of updated binary array back to the original integer array

print("The integer quantized array is shown below:\n", binArray)
print("---------------------------------------------------------------------------")
print("The shape of the integer array is: ", binArray.shape)
#-----------------------------------------------------------------------------------------------------------------------

intArray = binArray # Assigning the array to a new array variable

#-----------------------------------------------------------------------------------------------------------------------

# Conversion from 1D to 2D array
intArray.shape = (intArray.size // COLS, COLS)
print("New dimension of the array:", intArray.ndim)
print("----------------------------------------------------")
print("The shape of the updated original image array is: ", intArray.shape)
img = intArray.astype(int)   # Explicit type casting to integer, just in case.
print(" The 2D array of the updated original image is: \n", img)

#-----------------------------------------------------------------------------------------------------------------------

# Save the output image
print("----------------------------------------------------")
print("... Save the output image")
img.astype('int8').tofile(fileName[1])
print("... File successfully saved")
print("----------------------------------------------------")
# Closing the file
fin.close()

#-----------------------------------------------------------------------------------------------------------------------
# Thankyou.