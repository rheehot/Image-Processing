# -*- coding: utf-8 -*-
"""Programming_question-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e8KK-np8H5t1zpfHej7QiHsOjkhGFOql
"""

# Question 1

# **Note**: While entering the input. For example if the resolution of an image is **1600x1000**, then it means the **width** is **1600** and the **height** is **1000**. 
# Similarly in the above program the **rows** would be **1000** and the **columns** would be **1600**


# Write a program that reads a grayscale image in raw format from a file; resize the image to a specified resolution using the single point resampling method 
# and save the new image into a new file in raw format.


# Necessary libraries used for this assignment
import numpy as np

# The only reason that numpy library is used to convert the raw image into array of pixels. 
# Mainly used to store the values in an array.

#-----------------------------------------------------------------------------------------------------------------------

# Function: Resolution
#
#    Description:  This functions takes the input from the user. 
#                  User should enter the number of rows, columns of the old image and the new image.
#
#    Parameter:    None
#
#    Result:       returns the value of the inputted rows and columns of the old and new image.
#   
#    Author:       Tanu Nanda Prabhu

def resolution():

    # Explicitly typed-casted to intergers, because the rows and columns of the images must be an integer (ex: 256x256). 
    ROWS = int(input("Enter the number of rows of the old image: "))
    COLS = int(input("Enter the number of columns of the old image: "))

    ROWSNEW = int(input("Enter the number of rows of the new image: "))
    COLSNEW = int(input("Enter the number of columns of the new image: "))

    return ROWS, COLS, ROWSNEW, COLSNEW

#-----------------------------------------------------------------------------------------------------------------------

# Function: FileName
#
#    Description:  This functions takes the input from the user. 
#                  User should enter the filename along with the path to read and save.
#
#    Parameter:    None
#
#    Result:       returns the name of the file to read and save.
#   
#    Author:       Tanu Nanda Prabhu

def fileName():
 
    filename_to_read = input("Enter the file name to read:  ")
    filename_to_save = input("Enter the file name to save:  ")
    return filename_to_read, filename_to_save

#-----------------------------------------------------------------------------------------------------------------------

# Function: main
#
#    Description:  This is the main function of the program
#                  On executing this function, all the functions declared inside will be called. Just like in C, C++, etc.
#
#    Parameter:    None
#
#    Result:       Calls every function declared inside it.
#   
#    Author:       Tanu Nanda Prabhu

if __name__ == "__main__":

    resolution = resolution()    # Calling the resolution() and storing the result in the variable called resolution
    fileName = fileName()        # Calling the fileName() and storing the result in the variable called fileName

#-----------------------------------------------------------------------------------------------------------------------

# Initialising row and column values for the image
ROWS = resolution[0]        
COLS =  resolution[1]       # For example a particular image in this case would contain (256*256) rows and columns meaning 65,536 pixels

#-----------------------------------------------------------------------------------------------------------------------

# Opening the input image file (RAW format)
fin = open(fileName[0])     # The variable fileName contains the inputted file name to read from 
print("----------------------------------------------------")
print(fin)
print("----------------------------------------------------")

#-----------------------------------------------------------------------------------------------------------------------

# Loading the input image
print("... Load input image")
img = np.fromfile(fin, dtype = np.uint8, count = ROWS * COLS)  # This is why numpy is used to store the values in an array format (rows and columns)
print("Dimension of the old image array: ", img.ndim)
print("Size of the old image array: ", img.size)
print("----------------------------------------------------")

#-----------------------------------------------------------------------------------------------------------------------

# Conversion from 1D to 2D array because the image is a 2D image
img.shape = (img.size // COLS, COLS)
print("New dimension of the array:", img.ndim)
print(" The 2D array of the original image is: \n", img)
print("The shape of the original image array is: ", img.shape)
print("----------------------------------------------------")

#-----------------------------------------------------------------------------------------------------------------------

# This is an extra step, creating a empty 2D array, with new rows and columns (height and width). This is for the new image.
ROWSNEW = resolution[2] # width
COLSNEW = resolution[3] # height
imgNew = np.zeros([ROWSNEW, COLSNEW])

#-----------------------------------------------------------------------------------------------------------------------

# Converting the array into integer
imgNew = imgNew.astype(int)
print("The shape of the new Image array is: ", imgNew.shape)
print("----------------------------------------------------")

#-----------------------------------------------------------------------------------------------------------------------

# Function: Resampling
#
#   Parameter: img – the original image
#              N – the number of columns
#              M – the number rows
#              x, y – the position for resampling
#
#   Result:    resampled intensity value at (x,y) position

def resampling(img, N, M, x, y):

    i = int(x)   # truncation
    j = int(y)   # truncation
    
    s = (x - i)
    t = (y - j)
    
    result = img[j,i] * (1.0-s) * (1.0-t) + img[j,i+1] * s * (1.0-t) + img[j+1,i] * (1.0-s) * t + img[j+1,i+1] * s * t

    # Since we don't want the intensity values in float, we can safely explicitly type cast it to intergers as shown below
    return int(result)

#-----------------------------------------------------------------------------------------------------------------------

# Function: Image Resizing
#
#   Parameters: img – original image
#               N, M – columns and rows of the original image
#               imgNew – resized the new image
#               N1, M1 – columns and rows of the new image

def resizeImage(img, imgNew, N, M, N1, M1):

    x = 0.0    
    y = 0.0

    Dx = float(N - 1)/(N1 - 1)    # Dx, Dy are the interval lengths for resampling
    Dy = float(M - 1)/(M1 - 1)    # Double data type are not supported in python, so using float is preferable

    for j in range(M1):
        y += Dy
        for i in range(N1):

            # To avoid array index out of bound exception, since the rows and columns of original image is 256 and 256.
            # The resampling methods tries to access the 257 rows and 257 columns and so on...
            # So we need to manually set the thresholds and then break the condition once if the control come here and continue looping
            if(x >= COLS-1 or y >= ROWS-1 ):
                break

            imgNew[j][i] = resampling(img, N, M, x, y)  # Calling the resampling function which returns the intensity values at given points
            x = x+Dx

        # If we don't reinitialize the x value to 0.0 then at the end we will get a blank black image. So doing this is compulsory
        x = 0.0
        
    # Printing the new image array
    print(imgNew)


#-----------------------------------------------------------------------------------------------------------------------

# Calling the resizeImage function, which intern calls the resampling function inside it.
resizeImage(img, imgNew, resolution[1], resolution[0], resolution[3], resolution[2])
# Parameters of the resizeImage function is old image[][], columns, rows of old image, new image[][], columns, rows of the new image.
#-----------------------------------------------------------------------------------------------------------------------

# Save the output image
print("----------------------------------------------------")
print("... Save the output image")
imgNew.astype('int8').tofile(fileName[1])
print("... File successfully saved")
print("----------------------------------------------------")
# Closing the file
fin.close()

#-----------------------------------------------------------------------------------------------------------------------
# Thankyou.